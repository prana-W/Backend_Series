const express = require('express')
const fs = require('fs')
const mongoose = require('mongoose')
const app = express()
const port = 4000;

//////////////////////////////////////////////

//! MONGODB and MONGOOSE

// Connecting to MongoDB

// Whatever is after our base URI of mongodb is known as the database name
mongoose.connect('mongodb://127.0.0.1:27017/rest_api_project')
    .then(() => {
        console.log('MongoDB connected successfully!')
    })
    .catch((err) => {
        console.log('MongoDB connection failed:', err)
    })

// id is automatically generated by MongoDB, so we don't need to define it in the schema. We can access it by _id.

// Defining user schema
const userSchema = new mongoose.Schema({
    first_name: {
        type: String,
        required: true,
    },
    last_name: {
        type: String
    },
    email: {
        type: String,
        required: true,
        unique: true
    },
    gender: {
        type: String,
    },
    job_title: {
        type: String,
    }
}, {timestamps: true}) //timestamps will add createdAt and updatedAt fields automatically

// Creating User model
const User = mongoose.model('User', userSchema)
//! Here collection name will be called users
// Whatever we enter inside '', that name in lowercase and plural will be known as our collection name.

/////////////////////////////////////

app.use(express.urlencoded({extended: false}))
app.use((req, res, next) => {
    fs.appendFile('./log.txt',
        `${new Date().toLocaleTimeString()} - ${req.method} ${req.path}\n`, (err, data) => {
            next();
        }
    )
})

app.get('/', (req, res) => {
    return res.send('Welcome to the REST API Project!')
})

//! Read data from MongoDB
app.get('/users', async (req, res) => {

    // gives an array of all User documents in the users collection
    const allDbUserData = await User.find({})

    const html = `
    <ul>${allDbUserData.map((user) => `<li>${user.first_name} ${user.last_name}</li>`).join('')}</ul>`

    return res.send(html)
})
app.get('/api/users', async (req, res) => {

    const allDbUserData = await User.find({})

    res.setHeader('X-MyName', 'Pranaw Kumar') //custom header
    return res.json(allDbUserData)
})

//! Create data in MongoDB

// Make the handler async
app.post('/api/users', async (req, res) => {
    const body = req.body;

    if (!body || !body.first_name || !body.last_name || !body.email || !body.gender || !body.job_title) {
        return res.status(400).json({status: 'fail', error: 'Please provide all required fields.'})
    }

    //! Creating a User Document
    const result = await User.create({
        first_name: body.first_name,
        last_name: body.last_name,
        email: body.email,
        gender: body.gender,
        job_title: body.job_title
    })

    return res.status(201).json({status: 'success', message: `id: ${result._id} User added successfully!`})

})

// We use User.findById() to find user; User.findByIdAndUpdate() to update user; User.findByIdAndDelete() to delete user.
//! NOTE: Don't forget to use async/await for database operations
app.route('/api/users/:userId')
    .get(async (req, res) => {

        const user = await User.findById(req.params.userId)
        if (!user) {
            return res.status(404).json({status: 'fail', error: 'User not found'})
        }

        res.json([user])
    })
    .patch(async (req, res) => {

        await User.findByIdAndUpdate(req.params.userId, req.body)

        return res.json({status: 'success', message: `User with id ${req.params.userId} was updated successfully!`})

    })
    .delete(async (req, res) => {

        await User.findByIdAndDelete(req.params.userId)
        return res.json({status: 'success', message: `User with id ${req.params.userId} was deleted successfully!`})

    })

app.listen(port, () => {
    console.log(`Server is running on http://localhost:${port}`)
})